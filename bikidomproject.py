# -*- coding: utf-8 -*-
"""bikidomproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13vUboIgQuabqxqPYo27w4e_zo3nI3CY0
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

def double_pendulum(t, s, L1, L2, m1, m2, g):
    th1, w1, th2, w2 = s
    d = th2 - th1
    den1 = (m1 + m2) * L1 - m2 * L1 * np.cos(d) ** 2
    den2 = (L2 / L1) * den1

    dt1 = w1
    dw1 = (m2 * L1 * w1 ** 2 * np.sin(d) * np.cos(d) +
           m2 * g * np.sin(th2) * np.cos(d) +
           m2 * L2 * w2 ** 2 * np.sin(d) -
           (m1 + m2) * g * np.sin(th1)) / den1

    dt2 = w2
    dw2 = (-L2 / L1 * w1 ** 2 * np.sin(d) * np.cos(d) +
           (m1 + m2) * g * np.sin(th1) * np.cos(d) -
           (m1 + m2) * L1 * w1 ** 2 * np.sin(d) -
           (m1 + m2) * g * np.sin(th2)) / den2

    return [dt1, dw1, dt2, dw2]

L1, L2 = 1.0, 1.0
m1, m2 = 1.0, 1.0
g = 9.81

initial_state = [np.pi / 3, 0, np.pi / 2, 1.5]

t_span = (0, 20)
num_points = 10000

sol = solve_ivp(double_pendulum, t_span, initial_state, args=(L1, L2, m1, m2, g), t_eval=np.linspace(t_span[0], t_span[1], num_points))

plt.plot(sol.t, sol.y[0], label="Pendulum 1")
plt.plot(sol.t, sol.y[2], label="Pendulum 2")
plt.xlabel('Time (in seconds)')
plt.ylabel('Theta (Radians)')
plt.legend()
plt.title('Double Pendulum Motion - Theta vs Time')
plt.show()

plt.plot(sol.t, sol.y[1], label="Pendulum 1")
plt.plot(sol.t, sol.y[3], label="Pendulum 2")
plt.xlabel('Time (in seconds)')
plt.ylabel('Omega (in radians/seconds)')
plt.title('Double Pendulum Motion - Omega vs Time')
plt.legend()
plt.show()