# -*- coding: utf-8 -*-
"""domproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12orNj2xPlUqmCbyJeLuP9Rp2hK0YkMGl
"""

import numpy as np
import matplotlib.pyplot as plt

# Define the system matrices A, B, C, and D
A = np.array([[0, 1],
              [-2, -3]])  # Example values, modify these for your specific system

B = np.array([[0],
              [1]])

C = np.array([[1, 0]])

D = np.array([[0]])

# Define the initial state x0
x0 = np.array([0, 0])

# Simulation parameters
dt = 0.01  # Time step
t_max = 5.0  # Simulation time

# Create a time vector
t = np.arange(0, t_max, dt)

# Initialize arrays to store state and output values
x_history = []
y_history = []

# Simulation loop
x = x0
for ti in t:
    u = np.array([1.0])  # Example control input, modify as needed
    x_dot = np.dot(A, x) + np.dot(B, u)
    y = np.dot(C, x) + np.dot(D, u)

    x = x + x_dot * dt
    x_history.append(x)
    y_history.append(y)

# Convert the histories to NumPy arrays for easier manipulation
x_history = np.array(x_history)
y_history = np.array(y_history)

# Plot the results
plt.figure(figsize=(10, 5))
plt.subplot(2, 1, 1)
plt.plot(t, x_history[:, 0], label='State x1')
plt.plot(t, x_history[:, 1], label='State x2')
plt.xlabel('Time')
plt.ylabel('State')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(t, y_history, label='Output y')
plt.xlabel('Time')
plt.ylabel('Output')
plt.legend()

plt.show()