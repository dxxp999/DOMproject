# -*- coding: utf-8 -*-
"""system4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/117wTwLsEcFH2xWAsrUGgNm2orlKgkvL5
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

def double_pendulum(t, s, len1, len2, mass1, mass2, gravity):
    angle1, angular_velocity1, angle2, angular_velocity2 = s
    delta = angle2 - angle1
    denominator1 = (mass1 + mass2) * len1 - mass2 * len1 * np.cos(delta) ** 2
    denominator2 = (len2 / len1) * denominator1

    d_angle1 = angular_velocity1
    d_angular_velocity1 = (mass2 * len1 * angular_velocity1 ** 2 * np.sin(delta) * np.cos(delta) +
                           mass2 * gravity * np.sin(angle2) * np.cos(delta) +
                           mass2 * len2 * angular_velocity2 ** 2 * np.sin(delta) -
                           (mass1 + mass2) * gravity * np.sin(angle1)) / denominator1

    d_angle2 = angular_velocity2
    d_angular_velocity2 = (-len2 / len1 * angular_velocity1 ** 2 * np.sin(delta) * np.cos(delta) +
                           (mass1 + mass2) * gravity * np.sin(angle1) * np.cos(delta) -
                           (mass1 + mass2) * len1 * angular_velocity1 ** 2 * np.sin(delta) -
                           (mass1 + mass2) * gravity * np.sin(angle2)) / denominator2

    return [d_angle1, d_angular_velocity1, d_angle2, d_angular_velocity2]

len1, len2 = 1.0, 1.0
mass1, mass2 = 1.0, 1.0
gravity = 9.81

initial_state = [np.pi / 2, 0, np.pi / 2, 0]

time_span = (0, 10)
num_points = 10000

solution = solve_ivp(double_pendulum, time_span, initial_state, args=(len1, len2, mass1, mass2, gravity), t_eval=np.linspace(time_span[0], time_span[1], num_points))

plt.plot(solution.t, solution.y[0], label="Pendulum 1")
plt.plot(solution.t, solution.y[2], label="Pendulum 2")
plt.xlabel('Time (in seconds)')
plt.ylabel('Theta (Radians)')
plt.legend()
plt.title('Double Pendulum Motion - Theta vs Time')
plt.show()

plt.plot(solution.t, solution.y[1], label="Pendulum 1")
plt.plot(solution.t, solution.y[3], label="Pendulum 2")
plt.xlabel('Time (in seconds)')
plt.ylabel('Omega (in radians/seconds)')
plt.title('Double Pendulum Motion - Omega vs Time')
plt.legend()
plt.show()